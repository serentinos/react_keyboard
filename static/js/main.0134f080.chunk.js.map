{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","key","handleKeyUp","event","setState","document","addEventListener","this","removeEventListener","message","className","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAQ,CACNC,IAAK,MAFT,EAaEC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEH,IAAKE,EAAMF,OAd/B,uDAKE,WACEI,SAASC,iBAAiB,QAASC,KAAKL,eAN5C,kCASE,WACEG,SAASG,oBAAoB,QAASD,KAAKL,eAV/C,oBAiBE,WACE,IAAQD,EAAQM,KAAKP,MAAbC,IAEFQ,EAAUR,EAAG,mCACaA,EADb,KAEf,0BAEJ,OACE,mBAAGS,UAAU,eAAb,SAA6BD,QAzBnC,GAAyBE,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.0134f080.chunk.js","sourcesContent":["import { Component } from 'react';\n\ninterface State {\n  key: string | null;\n}\n\nexport class App extends Component<{}, State> {\n  state = {\n    key: null,\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  handleKeyUp = (event: KeyboardEvent) => {\n    this.setState({ key: event.key });\n  };\n\n  render() {\n    const { key } = this.state;\n\n    const message = key\n      ? `The last pressed key is [${key}]`\n      : 'Nothing was pressed yet';\n\n    return (\n      <p className=\"App__message\">{message}</p>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}